#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <ros/ros.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <sensor_msgs/PointCloud2.h> 
#include <pcl/features/normal_3d.h>
#include <pcl/PCLPointCloud2.h>
#include <Eigen/Eigen>
#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <pcl/filters/extract_indices.h>
#include <pcl-1.7/pcl/impl/point_types.hpp>
#include <pcl_conversions/pcl_conversions.h>

#ifndef PCL_BLOCKFIND_H_
#define PCL_BLOCKFIND_H_

enum block_color{
	BLOCK_RED,
	BLOCK_GREEN,
	BLOCK_BLUE,
	BLOCK_WHITE,
	BLOCK_WOOD,
	BLOCK_BLACK
};

const float PERFECT_RED[3] =	{1.0, 0.0, 0.0};
const float PERFECT_GREEN[3] =	{0.0, 1.0, 0.0};
const float PERFECT_BLUE[3] =	{0.0, 0.0, 1.0};
const float PERFECT_WHITE[3] =	{1.0, 1.0, 1.0};
const float PERFECT_WOOD[3] =	{1.0, 1.0, 0.0};
const float PERFECT_BLACK[3] =	{0.0, 0.0, 0.0};

const float PERFECT_COLORS[6][3] = {PERFECT_RED, PERFECT_GREEN, PERFECT_BLUE, PERFECT_WHITE, PERFECT_WOOD, PERFECT_BLACK};

struct block_data{
	Eigen::Vector3f centroid;
	float r;
	float g;
	float b;
	Eigen::Vector3f major_axis;
	float top_plane_z;
};

const double B_EPS = 0.1;

block_data find_the_block(pcl::PointCloud<pcl::PointXYZRGB>::Ptr inputCloud);

#endif
